// header file for the evaluation function

#ifndef EVALUATION_H

#define EVALUATION_H


#include "board.h"
#include "stack.h"

// FOR NOW WE USE THE OPEN-SOURCE "SIMPLE EVALUATION FUNCTION" FROM CHESSPROGRAMMING.ORG
// see: "https://www.chessprogramming.org/Simplified_Evaluation_Function" as of 2019

static const Score pieceScore[13] = {
    100, -100, // pawn
    320, -320, // knight
    330, -330, // bishop
    500, -500, // rook
    900, -900, // queen
    20000, -20000, // king
    0 // none
};

static const Score pieceSquareTable[13][64] = {
    /* wPawn */ {
         0,  0,  0,  0,  0,  0,  0,  0,
        50, 50, 50, 50, 50, 50, 50, 50,
        10, 10, 20, 30, 30, 20, 10, 10,
         5,  5, 10, 25, 25, 10,  5,  5,
         0,  0,  0, 20, 20,  0,  0,  0,
         5, -5,-10,  0,  0,-10, -5,  5,
         5, 10, 10,-20,-20, 10, 10,  5,
         0,  0,  0,  0,  0,  0,  0,  0,
    },
    /* bPawn */ {
          0,  0,  0,  0,  0,  0,  0,  0,
         -5,-10,-10, 20, 20,-10,-10, -5,
         -5,  5, 10,  0,  0, 10,  5, -5,
          0,  0,  0,-20,-20,  0,  0,  0,
         -5, -5,-10,-25,-25,-10, -5, -5,
        -10,-10,-20,-30,-30,-20,-10,-10,
        -50,-50,-50,-50,-50,-50,-50,-50,
          0,  0,  0,  0,  0,  0,  0,  0,
    },
    /* wKnight */ {
        -50,-40,-30,-30,-30,-30,-40,-50,
        -40,-20,  0,  0,  0,  0,-20,-40,
        -30,  0, 10, 15, 15, 10,  0,-30,
        -30,  5, 15, 20, 20, 15,  5,-30,
        -30,  0, 15, 20, 20, 15,  0,-30,
        -30,  5, 10, 15, 15, 10,  5,-30,
        -40,-20,  0,  5,  5,  0,-20,-40,
        -50,-40,-30,-30,-30,-30,-40,-50,
    },
    /* bKnight */ {
         50, 40, 30, 30, 30, 30, 40, 50,
         40, 20,  0, -5, -5,  0, 20, 40,
         30, -5,-10,-15,-15,-10, -5, 30,
         30,  0,-15,-20,-20,-15,  0, 30,
         30, -5,-15,-20,-20,-15, -5, 30,
         30,  0,-10,-15,-15,-10,  0, 30,
         40, 20,  0,  0,  0,  0, 20, 40,
         50, 40, 30, 30, 30, 30, 40, 50,
    },
    /* wBishop */ {
        -20,-10,-10,-10,-10,-10,-10,-20,
        -10,  0,  0,  0,  0,  0,  0,-10,
        -10,  0,  5, 10, 10,  5,  0,-10,
        -10,  5,  5, 10, 10,  5,  5,-10,
        -10,  0, 10, 10, 10, 10,  0,-10,
        -10, 10, 10, 10, 10, 10, 10,-10,
        -10,  5,  0,  0,  0,  0,  5,-10,
        -20,-10,-10,-10,-10,-10,-10,-20,
    },
    /* bBishop */ {
         20, 10, 10, 10, 10, 10, 10, 20,
         10, -5,  0,  0,  0,  0, -5, 10,
         10,-10,-10,-10,-10,-10,-10, 10,
         10,  0,-10,-10,-10,-10,  0, 10,
         10, -5, -5,-10,-10, -5, -5, 10,
         10,  0, -5,-10,-10, -5,  0, 10,
         10,  0,  0,  0,  0,  0,  0, 10,
         20, 10, 10, 10, 10, 10, 10, 20,
    },
    /* wRook */ {
          0,  0,  0,  0,  0,  0,  0,  0,
          5, 10, 10, 10, 10, 10, 10,  5,
         -5,  0,  0,  0,  0,  0,  0, -5,
         -5,  0,  0,  0,  0,  0,  0, -5,
         -5,  0,  0,  0,  0,  0,  0, -5,
         -5,  0,  0,  0,  0,  0,  0, -5,
         -5,  0,  0,  0,  0,  0,  0, -5,
          0,  0,  0,  5,  5,  0,  0,  0,
    },
    /* bRook */ {
          0,  0,  0, -5, -5,  0,  0,  0,
          5,  0,  0,  0,  0,  0,  0,  5,
          5,  0,  0,  0,  0,  0,  0,  5,
          5,  0,  0,  0,  0,  0,  0,  5,
          5,  0,  0,  0,  0,  0,  0,  5,
          5,  0,  0,  0,  0,  0,  0,  5,
         -5,-10,-10,-10,-10,-10,-10, -5,
          0,  0,  0,  0,  0,  0,  0,  0,
    },
    /* wQueen */ {
        -20,-10,-10, -5, -5,-10,-10,-20,
        -10,  0,  0,  0,  0,  0,  0,-10,
        -10,  0,  5,  5,  5,  5,  0,-10,
         -5,  0,  5,  5,  5,  5,  0, -5,
          0,  0,  5,  5,  5,  5,  0, -5,
        -10,  5,  5,  5,  5,  5,  0,-10,
        -10,  0,  5,  0,  0,  0,  0,-10,
        -20,-10,-10, -5, -5,-10,-10,-20,
    },
    /* bQueen */ {
         20, 10, 10,  5,  5, 10, 10, 20,
         10,  0, -5,  0,  0,  0,  0, 10,
         10, -5, -5, -5, -5, -5,  0, 10,
          0,  0, -5, -5, -5, -5,  0,  5,
          5,  0, -5, -5, -5, -5,  0,  5,
         10,  0, -5, -5, -5, -5,  0, 10,
         10,  0,  0,  0,  0,  0,  0, 10,
         20, 10, 10,  5,  5, 10, 10, 20,
    },
    /* wKing (midgame) */ { // TODO: include endgame table
        -30,-40,-40,-50,-50,-40,-40,-30,
        -30,-40,-40,-50,-50,-40,-40,-30,
        -30,-40,-40,-50,-50,-40,-40,-30,
        -30,-40,-40,-50,-50,-40,-40,-30,
        -20,-30,-30,-40,-40,-30,-30,-20,
        -10,-20,-20,-20,-20,-20,-20,-10,
         20, 20,  0,  0,  0,  0, 20, 20,
         20, 30, 10,  0,  0, 10, 30, 20,
    },
    /* bKing (midgame) */ { // TODO: include endgame table
        -20,-30,-10,  0,  0,-10,-30,-20,
        -20,-20,  0,  0,  0,  0,-20,-20,
         10, 20, 20, 20, 20, 20, 20, 10,
         20, 30, 30, 40, 40, 30, 30, 20,
         30, 40, 40, 50, 50, 40, 40, 30,
         30, 40, 40, 50, 50, 40, 40, 30,
         30, 40, 40, 50, 50, 40, 40, 30,
         30, 40, 40, 50, 50, 40, 40, 30,
    },
    /* none */ {
          0,  0,  0,  0,  0,  0,  0,  0,
          0,  0,  0,  0,  0,  0,  0,  0,
          0,  0,  0,  0,  0,  0,  0,  0,
          0,  0,  0,  0,  0,  0,  0,  0,
          0,  0,  0,  0,  0,  0,  0,  0,
          0,  0,  0,  0,  0,  0,  0,  0,
          0,  0,  0,  0,  0,  0,  0,  0,
          0,  0,  0,  0,  0,  0,  0,  0,
    },
};

/* TODO: include this 
static const Score kingEndgamePieceSquareTable[] = {
    -50,-40,-30,-20,-20,-30,-40,-50,
    -30,-20,-10,  0,  0,-10,-20,-30,
    -30,-10, 20, 30, 30, 20,-10,-30,
    -30,-10, 30, 40, 40, 30,-10,-30,
    -30,-10, 30, 40, 40, 30,-10,-30,
    -30,-10, 20, 30, 30, 20,-10,-30,
    -30,-30,  0,  0,  0,  0,-30,-30,
    -50,-30,-30,-30,-30,-30,-30,-50,
};
    //  bKing (endgame) 
    {
         50, 30, 30, 30, 30, 30, 30, 50,
         30, 30,  0,  0,  0,  0, 30, 30,
         30, 10,-20,-30,-30,-20, 10, 30,
         30, 10,-30,-40,-40,-30, 10, 30,
         30, 10,-30,-40,-40,-30, 10, 30,
         30, 10,-20,-30,-30,-20, 10, 30,
         30, 20, 10,  0,  0, 10, 20, 30,
         50, 40, 30, 20, 20, 30, 40, 50,
    },
*/


// THIS SHOULD BE INCREMENTALLY UPDATED ON THE BOARD

Score evaluate(Board *board);

Score static_exchange_evaluation(SquareCode square, Board *board, Stack *stack);

Score capture_static_evaluation(SquareCode from, SquareCode to, Board *board, Stack *stack);

#endif


